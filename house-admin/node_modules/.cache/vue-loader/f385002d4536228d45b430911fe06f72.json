{"remainingRequest":"C:\\Users\\xubo\\Desktop\\房屋租赁项目\\house-admin\\node_modules\\.store\\vue-loader@15.10.1\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\xubo\\Desktop\\房屋租赁项目\\house-admin\\node_modules\\.store\\cache-loader@4.1.0\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\xubo\\Desktop\\房屋租赁项目\\house-admin\\node_modules\\.store\\vue-loader@15.10.1\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\xubo\\Desktop\\房屋租赁项目\\house-admin\\src\\views\\system\\lock\\index.vue?vue&type=template&id=4cb44524&","dependencies":[{"path":"C:\\Users\\xubo\\Desktop\\房屋租赁项目\\house-admin\\src\\views\\system\\lock\\index.vue","mtime":1682972210000},{"path":"C:\\Users\\xubo\\Desktop\\房屋租赁项目\\house-admin\\node_modules\\.store\\cache-loader@4.1.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\xubo\\Desktop\\房屋租赁项目\\house-admin\\node_modules\\.store\\vue-loader@15.10.1\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\xubo\\Desktop\\房屋租赁项目\\house-admin\\node_modules\\.store\\cache-loader@4.1.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\xubo\\Desktop\\房屋租赁项目\\house-admin\\node_modules\\.store\\vue-loader@15.10.1\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}